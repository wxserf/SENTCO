[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[project]
name = "sentience"
version = "0.1.0"
description = "GPT-powered EVE Online co-pilot assistant"
readme = "README.md"
license = {text = "MIT"}
authors = [
    {name = "Your Name", email = "your.email@example.com"},
]
keywords = ["eve-online", "ai", "gpt", "gaming", "assistant"]
classifiers = [
    "Development Status :: 3 - Alpha",
    "Intended Audience :: End Users/Desktop",
    "Topic :: Games/Entertainment",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
]
requires-python = ">=3.9"
dependencies = [
    "requests>=2.31.0",
    "cryptography>=41.0.7",
    "PyJWT>=2.8.0",
    "python-dotenv>=1.0.0",
]

[project.optional-dependencies]
api = [
    "fastapi>=0.109.0",
    "uvicorn[standard]>=0.27.0",
    "pydantic>=2.5.3",
    "python-multipart>=0.0.6",
]
cli = [
    "click>=8.1.7",
    "rich>=13.7.0",
]
ai = [
    "openai>=1.10.0",
]
dev = [
    "pytest>=7.4.4",
    "pytest-asyncio>=0.23.3",
    "pytest-cov>=4.1.0",
    "black>=23.12.1",
    "ruff>=0.1.11",
    "mypy>=1.8.0",
    "pre-commit>=3.6.0",
]
all = [
    "sentience[api,cli,ai]",
]

[project.urls]
Homepage = "https://github.com/yourusername/sentience"
Documentation = "https://github.com/yourusername/sentience/wiki"
Repository = "https://github.com/yourusername/sentience.git"
Issues = "https://github.com/yourusername/sentience/issues"

[project.scripts]
sentience-cli = "sentience.cli.__main__:main"
sentience-api = "sentience.api.server:run"

[tool.hatch.build.targets.sdist]
include = [
    "/src",
    "/tests",
    "/docs",
    "LICENSE",
    "README.md",
]

[tool.hatch.build.targets.wheel]
packages = ["src/sentience"]

[tool.pytest.ini_options]
minversion = "7.0"
testpaths = ["tests"]
addopts = [
    "-ra",
    "--strict-markers",
    "--cov=sentience",
    "--cov-report=term-missing",
]

[tool.black]
line-length = 100
target-version = ['py39', 'py310', 'py311']
include = '\.pyi?$'
exclude = '''
/(
    \.git
  | build
  | dist
  | docs
)/
'''

[tool.ruff]
line-length = 100
target-version = "py39"
exclude = ["docs/*", "dist/*", "build/*"]
select = [
    "E",   # pycodestyle errors
    "W",   # pycodestyle warnings
    "F",   # pyflakes
    "I",   # isort
    "B",   # flake8-bugbear
    "C4",  # flake8-comprehensions
    "UP",  # pyupgrade
]
ignore = [
    "E501",  # line too long (handled by black)
    "B008",  # do not perform function calls in argument defaults
]

[tool.mypy]
python_version = "3.9"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
ignore_missing_imports = true
